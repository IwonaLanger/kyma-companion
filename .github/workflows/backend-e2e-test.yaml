name: Backend - E2E test

on:
  push:
    branches: ["main"]
    paths:
      - "assistant/backend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "assistant/backend/**"

jobs:
  build:
    name: Backend E2E test
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      # Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Install Python 3.11
      - name: Install Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      # Install Kyma CLI
      # - name: Install Kyma CLI
      #   run: |
      #     curl -o kyma https://storage.googleapis.com/kyma-cli-stable/kyma-linux
      #     chmod +x kyma
      #     mkdir -p ~/.kyma-cli/bin
      #     mv kyma ~/.kyma-cli/bin
      #     export PATH=$PATH:~/.kyma-cli/bin
          
    
      # - name: Kyma provision
      #   run: ~/.kyma-cli/bin/kyma provision k3d 
      
      # - name: Kyma deploy
      #   run:  ~/.kyma-cli/bin/kyma alpha deploy --ci --non-interactive
      

      # - name: check kyma
      #   run: kubectl get ns

      # Build local Docker image
      - name: Build Docker image
        working-directory: ./assistant/backend
        run: |
          # Build the Docker image
          docker build --build-arg "JFROG_USER=${{ secrets.JFROG_IDENTITY_USER }}" --build-arg "JFROG_TOKEN=${{ secrets.JFROG_IDENTITY_TOKEN }}" -t ai-backend .

      # Check the Docker image
      - name: Check Docker image
        run: docker images ai-backend


      # Install and configure K3s cluster
      - name: Install and configure K3s cluster
        run: |
          # K3s installation
          curl -sfL https://get.k3s.io | INSTALL_K3S_VERSION="v1.27.4+k3s1" K3S_KUBECONFIG_MODE=644 INSTALL_K3S_EXEC="server --docker --disable traefik" sh -
          mkdir -p ~/.kube
          cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
          chmod 600 ~/.kube/config

      # Verify K3s cluster
      - name: Verify K3s cluster
        run: |
          kubectl get nodes
          kubectl get ns
      
      # Deploy the Docker image to the K3s cluster
      - name: Deploy the Docker image to the K3s cluster
        run: |
            kubectl apply -f .reuse/deployment/01-ai-backend-namespace.yaml
            kubectl get ns
            echo "${{ secrets.K3S_CONFIGMAP }}" > .reuse/deployment/02-ai-backend-configmap.yaml
            cat .reuse/deployment/02-ai-backend-configmap.yaml
            kubectl apply -f .reuse/deployment/02-ai-backend-configmap.yaml
            kubectl get cm -n ai-core

            kubectl apply -f .reuse/deployment/03-ai-backend-deployment.yaml
            kubectl get deploy -n ai-core
            sleep 15
            kubectl get pods -n ai-core
            kubectl get svc -n ai-core

