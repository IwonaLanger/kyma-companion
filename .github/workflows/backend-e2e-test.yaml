name: Backend - E2E test

on:
  push:
    branches: ["main"]
    paths:
      - "assistant/backend/**"
  pull_request:
    branches: ["main"]
    paths:
      - "assistant/backend/**"

env:
  DOCKER_TIMEOUT: 30

jobs:
  build:
    name: Backend E2E test
    runs-on: ubuntu-latest
    permissions: write-all
    steps:
      # Get the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Build local Docker image
      - name: Build Docker image

        working-directory: ./assistant/backend
        run: |
          # Build the Docker image
          docker build --build-arg "JFROG_USER=${{ secrets.JFROG_IDENTITY_USER }}" --build-arg "JFROG_TOKEN=${{ secrets.JFROG_IDENTITY_TOKEN }}" -t ai-backend .

      # Check the Docker image
      - name: Check Docker image
        run: docker images ai-backend

      - name: Local Image registry
        run: |
          docker run -d -p 5000:5000 --restart=always --name registry registry:2

      # Convert image to tar
      - name: Push image to local registry
        run: |
          sleep 10
          docker tag ai-backend:latest localhost:5000/ai-backend:latest
          docker push localhost:5000/ai-backend:latest

      - name: Configure local registry for k3s
        run: |
          mkdir -p ~/.k3s
          cat <<EOF > ~/.k3s/registries.yaml
          mirrors:
            "localhost:5000":
              endpoint:
                - "http://localhost:5000"
          EOF

      # Install and configure K3s cluster
      - name: Install and configure K3s cluster
        run: .scripts/shell/k3s-installation.sh

      # Verify K3s cluster
      - name: Verify K3s cluster
        run: |
          kubectl get nodes
          kubectl get ns

      # Deploy the Docker image to the K3s cluster
      ## Ceare namespace
      - name: Create namespace
        run: |
          kubectl apply -f .scripts/kubernetes/ai-backend-namespace.yaml

      ## Create secret
      - name: Create secret on K3s
        run: |
          echo "${{ secrets.K3S_SECRET }}" > .scripts/kubernetes/ai-backend-secret.yaml
          kubectl apply -f .scripts/kubernetes/ai-backend-secret.yaml
          rm -f .scripts/kubernetes/ai-backend-secret.yaml

      ## Create configmap
      - name: Create configmap on K3s
        run: |
          echo "${{ secrets.K3S_CONFIGMAP }}" > .scripts/kubernetes/ai-backend-configmap.yaml
          kubectl apply -f .scripts/kubernetes/ai-backend-configmap.yaml
          rm -f .scripts/kubernetes/ai-backend-configmap.yaml

      ## Deploy pod and service (NodePort)
      - name: Deploy the Docker image to the K3s cluster
        run: |
          kubectl apply -f .scripts/kubernetes/ai-backend-deployment.yaml
      ## Check the deployment
      - name: Check the deployment
        run: |
          # Wait for deployment
          sleep 15
          # Get deployed pod name
          POD=$(kubectl get pod -n ai-core -l app=ai-backend -o jsonpath="{.items[0].metadata.name}")
          # Set running counter
          RUN_COUNTER=0
          # Get pod status
          kubectl get pods $POD -n ai-core -o 'jsonpath={.status.containerStatuses[0]}' | jq .
          # Wait for pod to be ready or timeout
          while [[ $(kubectl get pods $POD -n ai-core -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}') != "True" ]] && [[ "$DOCKER_TIMEOUT" -gt "$RUN_COUNTER" ]]; do
            sleep 1
            RUN_COUNTER=$((RUN_COUNTER+1))
            echo "$RUN_COUNTER / $DOCKER_TIMEOUT - Waiting for the pod to be ready"
            kubectl get pods $POD -n ai-core -o 'jsonpath={.status.containerStatuses[0]}' | jq .
          done
          # Get service
          kubectl get svc -n ai-core
          # Get pods
          kubectl get pods -n ai-core

      # Backend health check - /api/v1/health/check
      - name: Check - Health check
        run: |
          sleep 5
          { # try

            curl --request GET --url "http://localhost:32000/api/v1/health/check" --header "Content-Type: application/json"
            #save your output

          } || { # catch
            POD=$(kubectl get pod -n ai-core -l app=ai-backend -o jsonpath="{.items[0].metadata.name}")
            kubectl describe pod $POD -n ai-core
            kubectl logs $POD -n ai-core
          }
      # Backend resources check - /api/v1/resources
      - name: Check - Health check
        run: |
          sleep 5
          { # try

            curl --request GET --url "http://localhost:32000/api/v1/resources" --header "Content-Type: application/json"
            #save your output

          } || { # catch
            POD=$(kubectl get pod -n ai-core -l app=ai-backend -o jsonpath="{.items[0].metadata.name}")
            kubectl describe pod $POD -n ai-core
            kubectl logs $POD -n ai-core
          }
