name: "Companion E2E test"
run-name: "Companion E2E test - Phase 1"

# On Production you must use pull_request_target on main branch
# on:
#   pull_request_target:
#     branches:
#       - main
#     paths:
#       - "src/**"

on:
  pull_request:
    branches:
      - "*"
    paths:
      - "src/**"

# global env variables.
env:
  KYMA_VERSION: "2.20.5" # Required Kyma version.
  K3D_VERSION: "v5.7.2" # Required K3d version.
  REPOSITORY_FULL_NAME: "${{ github.repository }}" # <owner>/<repository-name>.
  IMAGE_NAME: "europe-docker.pkg.dev/kyma-project/prod/kyma-companion" # without tag.

jobs:
  test-e2e:
    name: Run E2E tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}

      - name: Install Kyma CLI
        id: install-kyma-cli
        run: |
          mkdir -p bin
          curl -L "https://github.com/kyma-project/cli/releases/download/${KYMA_VERSION}/kyma_$(uname -s)_$(uname -m).tar.gz" | tar -zxvf - -C bin kyma && mv bin/kyma bin/kyma@v2
          echo "::set-output name=version::$(bin/kyma@v2 version)"
        continue-on-error: true
      - name: Check Kyma CLI version
        id: check-kyma-cli-version
        run: |
          ::notice title={Check Kyma CLI verion}::{Required version: ${KYMA_VERSION}}
          kyma_cli_version=$(echo "${{ steps.install-kyma-cli.outputs.version }}" | cut -d ":" -f 2 | xargs)
          if [ "$kyma_cli_version" != "${KYMA_VERSION}" ]; then
            echo "Kyma CLI version is not correct. Expected: ${KYMA_VERSION}, got: $kyma_cli_version"
            exit 1
          fi
      - name: Install K3d
        id: install-k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | TAG=${K3D_VERSION} bash
          echo "::set-output name=version::$(k3d --version)"
        continue-on-error: true
      - name: Check K3d version
        id: check-k3d-version
        run: |
          ::notice title={Check K3d verion}::{Required version: ${K3D_VERSION}}
          k3d_version=$(echo "${{ steps.install-k3d.outputs.version }}" | cut -d " " -f 3 | xargs)
          if [ "$k3d_version" != "${K3D_VERSION}" ]; then
            echo "K3d version is not correct. Expected: ${K3D_VERSION}, got: $k3d_version"
            exit 1
          fi
      - name: Deploy Kyma
        id: deploy-kyma
        run: |
          ::group::{Kyma - Provision}
          bin/kyma@v2 provision k3d --ci --non-interactive -p 9080:80@loadbalancer -p 9443:443@loadbalancer
          ::endgroup::
          ::group::{Kyma - Deploy}
          bin/kyma@v2 alpha deploy --ci --non-interactive
          ::endgroup::
      - name: Verify Kyma deployment
        id: verify-kyma-deployment
        run: |
          ::group::{Kyma - Context}
          kubectl config get-contexts k3d-kyma
          kubectl config current-context
          ::endgroup::
          ::group::{Kyma - Verify}
          kubectl get nodes
          kubectl get ns
          kubectl get po -A
          kubectl get kyma -A -ojson | jq -r '[(.items[].status.state)] | .[0]'
          kubectl get kyma -A -ojson | jq -r '[(.items[].status)]'
          ::endgroup::

          ::group::{Kyma - Verify BTP Operator}  
          kubectl get kymas.operator.kyma-project.io -n kyma-system default-kyma -o=jsonpath='{.status}' | jq
          kubectl get kyma -A -ojson | jq -r --arg MODULE_NAME "btp-operator" '[(.items[].status.modules[]?) | select(.name==$MODULE_NAME)]' | jq -r '.[].state'
          ::endgroup::
          ::notice title={Kubeconfig}::{Kubeconfig file path: $KUBECONFIG}}
          ::debug::{Kubeconfig file path: $KUBECONFIG}
